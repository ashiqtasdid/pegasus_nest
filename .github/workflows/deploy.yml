name: Deploy to VPS

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.11.0
          run_install: false

      - name: Verify pnpm installation
        run: |
          pnpm --version
          echo "Checking lockfiles..."
          ls -la pnpm-lock.yaml frontend/pnpm-lock.yaml || echo "Some lockfiles missing"

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          echo "Installing dependencies with workspace configuration..."
          # Check if lockfile is compatible
          if pnpm install --frozen-lockfile --dry-run; then
            echo "Using frozen lockfile..."
            pnpm install --frozen-lockfile
          else
            echo "Lockfile incompatible, regenerating..."
            pnpm install
          fi

      - name: Build all components
        run: pnpm run build:all

      - name: Run backend tests (if available)
        run: pnpm run test || echo "No tests configured"
        continue-on-error: true

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Add VPS to known hosts
        run: |
          ssh-keyscan -H 37.114.41.124 >> ~/.ssh/known_hosts

      - name: Create deployment directory on VPS
        run: |
          ssh root@37.114.41.124 "mkdir -p /opt/pegasus-nest-temp"

      - name: Create environment files on VPS first
        run: |
          ssh root@37.114.41.124 << 'EOF'
          cd /opt/pegasus-nest-temp
          
          # Create main .env file for backend
          cat > .env << 'ENVEOF'
          NODE_ENV=production
          OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}
          PORT=3000
          ENVEOF
          
          # Create frontend .env.local file with Better Auth variables
          mkdir -p frontend
          cat > frontend/.env.local << 'FRONTENDEOF'
          NODE_ENV=production
          NEXT_PUBLIC_API_URL=http://37.114.41.124
          MONGODB_URL=${{ secrets.MONGODB_URL }}
          GITHUB_CLIENT_ID=${{ secrets.OAUTH_GITHUB_CLIENT_ID }}
          GITHUB_CLIENT_SECRET=${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }}
          BETTER_AUTH_SECRET=${{ secrets.BETTER_AUTH_SECRET }}
          BETTER_AUTH_URL=http://37.114.41.124
          FRONTENDEOF
          
          # Create necessary directories
          mkdir -p generated logs
          EOF

      - name: Copy files to VPS
        run: |
          rsync -avz --exclude-from='.gitignore' \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='frontend/node_modules' \
            --exclude='.next' \
            --exclude='frontend/.next' \
            --exclude='dist' \
            --exclude='build' \
            --exclude='logs' \
            --exclude='generated' \
            ./ root@37.114.41.124:/opt/pegasus-nest-temp/

      - name: Verify environment files on VPS
        run: |
          ssh root@37.114.41.124 << 'EOF'
          cd /opt/pegasus-nest-temp
          
          # Verify environment files exist and have content
          if [ ! -f .env ] || [ ! -s .env ]; then
            echo "ERROR: .env file is missing or empty"
            exit 1
          fi
          
          if [ ! -f frontend/.env.local ] || [ ! -s frontend/.env.local ]; then
            echo "ERROR: frontend/.env.local file is missing or empty"
            exit 1
          fi
          
          echo "âœ… Environment files verified"
          echo "Backend env variables:"
          grep -v "API_KEY" .env || echo "No API_KEY found"
          echo "Frontend env variables:"
          grep -v "SECRET\|CLIENT_SECRET\|MONGODB_URL" frontend/.env.local || echo "Sensitive vars present"
          EOF

      - name: Deploy application
        run: |
          ssh root@37.114.41.124 << 'EOF'
          cd /opt/pegasus-nest-temp
          
          # Stop existing services if running
          if [ -f /opt/pegasus-nest/docker-compose.simple.yml ]; then
            cd /opt/pegasus-nest
            docker-compose -f docker-compose.simple.yml down || true
          fi
          
          # Move new deployment to production directory
          rm -rf /opt/pegasus-nest-backup
          if [ -d /opt/pegasus-nest ]; then
            mv /opt/pegasus-nest /opt/pegasus-nest-backup
          fi
          mv /opt/pegasus-nest-temp /opt/pegasus-nest
          
          cd /opt/pegasus-nest
          
          # Make deployment script executable
          chmod +x deploy-vps.sh
          
          # Deploy
          ./deploy-vps.sh
          EOF

      - name: Verify deployment
        run: |
          sleep 30
          curl -f http://37.114.41.124/health || curl -f http://37.114.41.124 || exit 1

      - name: Cleanup on failure
        if: failure()
        run: |
          ssh root@37.114.41.124 << 'EOF'
          # Restore backup if deployment failed
          if [ -d /opt/pegasus-nest-backup ]; then
            cd /opt/pegasus-nest-backup
            docker-compose -f docker-compose.simple.yml up -d || true
          fi
          EOF
