name: Deploy to VPS

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build backend
      run: pnpm run build

    - name: Build frontend
      run: pnpm --filter frontend run build

      - name: Run backend tests (if available)
        run: pnpm run test || echo "No tests configured"
        continue-on-error: true

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Add VPS to known hosts
        run: |
          ssh-keyscan -H 37.114.41.124 >> ~/.ssh/known_hosts

      - name: Create deployment directory on VPS
        run: |
          ssh root@37.114.41.124 "mkdir -p /opt/pegasus-nest-temp"

      - name: Copy files to VPS
        run: |
          rsync -avz --exclude-from='.gitignore' \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='frontend/node_modules' \
            --exclude='.next' \
            --exclude='frontend/.next' \
            --exclude='dist' \
            --exclude='build' \
            --exclude='logs' \
            --exclude='generated' \
            ./ root@37.114.41.124:/opt/pegasus-nest-temp/

      - name: Create environment files on VPS
        run: |
          ssh root@37.114.41.124 << 'EOF'
            cd /opt/pegasus-nest-temp
            
            # Create main .env file
            cat > .env << EOL
            NODE_ENV=production
            OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}
            PORT=3000
            EOL
            
            # Create frontend .env.production file
            mkdir -p frontend
            cat > frontend/.env.production << EOL
            NODE_ENV=production
            NEXT_PUBLIC_API_URL=http://37.114.41.124
            EOL
            
            # Create necessary directories
            mkdir -p generated logs
          EOF

      - name: Deploy application
        run: |
          ssh root@37.114.41.124 << 'EOF'
            cd /opt/pegasus-nest-temp
            
            # Stop existing services if running
            if [ -f /opt/pegasus-nest/docker-compose.simple.yml ]; then
              cd /opt/pegasus-nest
              docker-compose -f docker-compose.simple.yml down || true
            fi
            
            # Move new deployment to production directory
            rm -rf /opt/pegasus-nest-backup
            if [ -d /opt/pegasus-nest ]; then
              mv /opt/pegasus-nest /opt/pegasus-nest-backup
            fi
            mv /opt/pegasus-nest-temp /opt/pegasus-nest
            
            cd /opt/pegasus-nest
            
            # Make deployment script executable
            chmod +x deploy-vps.sh
            
            # Deploy
            ./deploy-vps.sh
          EOF

      - name: Verify deployment
        run: |
          sleep 30
          curl -f http://37.114.41.124/health || curl -f http://37.114.41.124 || exit 1

      - name: Cleanup on failure
        if: failure()
        run: |
          ssh root@37.114.41.124 << 'EOF'
            # Restore backup if deployment failed
            if [ -d /opt/pegasus-nest-backup ]; then
              cd /opt/pegasus-nest-backup
              docker-compose -f docker-compose.simple.yml up -d || true
            fi
          EOF
